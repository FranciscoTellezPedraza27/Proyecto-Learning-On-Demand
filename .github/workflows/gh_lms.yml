# Este workflow define un pipeline básico de integración continua con GitHub Actions

name: Integracion

# Controla cuándo se ejecutará el workflow
on:
  # Ejecuta el workflow en eventos de push o pull request solo en la rama "main"
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Permite ejecutar el workflow manualmente desde GitHub
  workflow_dispatch:

jobs:
  # Definición del trabajo de construcción
  build:
    # Define el sistema operativo sobre el cual se ejecutarán las acciones (Ubuntu)
    runs-on: ubuntu-latest

    steps:
      # Clona el repositorio en el ambiente de trabajo
      - uses: actions/checkout@v4

      # Configura Node.js en la versión especificada para usar en el proyecto
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Instala las dependencias de npm definidas en el proyecto
      - name: Install dependencies
        run: npm install

      # Otorga permisos de ejecución al archivo stylelint en node_modules
      - name: Set permissions for stylelint
        run: chmod +x ./node_modules/.bin/stylelint

      # Limpia la caché de npm para evitar posibles conflictos con instalaciones previas
      - name: Clean npm cache
        run: npm cache clean --force

      # Otorga permisos de ejecución al archivo jest en node_modules para ejecutar pruebas
      - name: Set permissions for Jest
        run: chmod +x ./node_modules/.bin/jest

      - name: List files (debugging)
        run: ls -la

      #Se agregan las lineas de comando de acuerdo a lo solicitado
      #Empaqueta todos los archivos
      - name: Package artifact
        run: zip -r application.zip .

      #Almacenamiento de artefactos
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-artifact
          path: application.zip
      
      #Despliegue atuomatizado
      - name: Deploy locally with docker
        run: |
          docker build -t my-app
          docker run -d -p 8080:8080 my-app

      #Construir una imagen
      - name: Build Docker image
        run: docker build -t my-app .

      #Despliegue con Docker
      - name: Run Docker container
        run: |
          docker run -d -p 8080:8080 --name test-container my-app
      
      #Configuración del secreto
      - name: Log in to Docker Hub
        run: echo "${{ secrets.Francisco-27 }}" | docker login -u "${{ secrets.FRANCISCO }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: docker push my-app:latest

