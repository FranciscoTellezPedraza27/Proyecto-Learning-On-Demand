name: Integracion

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Clona el repositorio
      - uses: actions/checkout@v4

      # Configura Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Instala las dependencias
      - name: Install dependencies
        run: npm install

      # Ajusta permisos de archivos
      - name: Set permissions for stylelint
        run: chmod +x ./node_modules/.bin/stylelint

      - name: Set permissions for Jest
        run: chmod +x ./node_modules/.bin/jest

      - name: List files (debugging)
        run: ls -la

      # Empaqueta los archivos
      - name: Package artifact
        run: zip -r application.zip .

      # Almacena los artefactos
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-artifact
          path: application.zip

      # Construye una imagen Docker
      - name: Build Docker image
        run: docker build -t my-app .

      # Corre el contenedor Docker
      - name: Run Docker container
        run: docker run -d -p 8081:8080 --name test-container my-app

      # Configura SSH (nuevo bloque separado)
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      # Prueba la conexi√≥n SSH
      - name: Test SSH connection
        run: ssh -T git@github.com

      # Publica la imagen Docker en Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push my-app:latest
